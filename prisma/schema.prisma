// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  accessToken  String?  @db.LongText
  refreshToken String?  @db.LongText
  role         Role     @default(CREATOR)
  profil       Profil?
  Media        Media[]
  social       Social[]
  rating       Rating[]

  clientRequests  ProjetRequest[] @relation("ClientRequest")
  creatorProjects ProjetRequest[] @relation("CreatorResponse")
  creator         Project[]       @relation("Creator")
  client          Project[]       @relation("Client")
}

model Profil {
  id         String   @id @default(cuid())
  avatar     String
  banner     String
  username   String
  bio        String?
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  rate       Rating[]
  tags       Tags[]
}

model Social {
  id     String @id @default(cuid())
  name   String
  link   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Media {
  id          String   @id @default(cuid())
  url         String
  description String?
  title       String
  isFeatured  Boolean  @default(false)
  priority    Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  created_at  DateTime @default(now())
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Rating {
  id         String   @id @default(cuid())
  score      Int
  comment    String?
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  profilId   String
  profil     Profil   @relation(fields: [profilId], references: [id])
  created_at DateTime @default(now())
}

model Tags {
  id       String @id @default(cuid())
  name     String
  profilId String
  profil   Profil @relation(fields: [profilId], references: [id])
}

model ProjetRequest {
  id          String   @id @default(cuid())
  description String
  status      String   @default("open")
  clientId    String
  client      User     @relation("ClientRequest", fields: [clientId], references: [id])
  creatorId   String?
  creator     User?    @relation("CreatorResponse", fields: [creatorId], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("en attente") // pending, in progress, completed, etc.
  creatorId   String
  creator     User     @relation("Creator", fields: [creatorId], references: [id])
  clientId    String?
  client      User?    @relation("Client", fields: [clientId], references: [id])
  media       Media[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

enum Role {
  CREATOR
  CLIENT
}
